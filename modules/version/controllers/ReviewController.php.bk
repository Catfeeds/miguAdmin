<?php

class ReviewController extends VController
{
    public function actionIndex()
    {
        $username=$_REQUEST['pro'];
        $flag= '1';
        $res  = Common::getUser($username,$flag);
        $page = 20;
        $data = $this->getPageInfo($page);
        $list = array();
        if(!empty($_REQUEST['type'])){
            $list['type']=$_REQUEST['type'];
        }
        $list['cp']=$res['cp'];
        $list['review']=$res['review'];
        $tmp =VideoManager::getReview($data,$list);
        $url = $this->createUrl($this->action->id);
        $pagination = $this->renderPagination($url,$tmp['count'],$page,$data['currentPage']);
        $list = array();
        if(!empty($res['review'])){
            $list = $tmp['list'];
        }else{
            if(in_array('3',$res['status'])){
                $list=$tmp['list'];
            }
        }
        $this->render('index',array('list'=>$list,'page'=>$pagination,'res'=>$res));
    }

    public function actionAdd(){
        try {
            $username = $_REQUEST['username'];
            //var_dump($username);
            $flag=1;
            $workid = Common::EditWorkid($username,$flag);
            $tmp = Video::model()->findByPk($_REQUEST['gid']);
            $vid = $tmp->attributes['vid'];
            $reject = VerReject::model()->find("vid='$vid'");
            if(empty($reject)){
                $reject = new VerReject();
            }
            $reject->user = $username;
            $reject->addTime=time();
            $reject->vid=$vid;
            $reject->flag='1';
            $reject->save();
            //var_dump($workid);die;
            $resulst = Video::model()->updateAll(array('flag'=>1,'workid'=>$workid),'id=:id',array(':id'=>$_REQUEST['gid']));
            //$resulst = Video::model()->updateAll(array('flag'=>1,'upTime'=>time()),'id=:id',array(':id'=>$_REQUEST['gid']));

        }catch (ExceptionEx $ex){
            $this->PopMsg($ex->getMessage());
        }catch (Exception $e){
            $this->log($e->getMessage());
        }
    }
   
    public function actionAccess(){
        try {
            $vid = $_REQUEST['vid'];
            $username=$_REQUEST['nickname'];
            $flag= '1';
            $res  = Common::workid($username,$flag);
            $tmp = Video::model()->find("vid='$vid'");
            if($res=='1'){
                $this->Access($vid,$_REQUEST['gid']);
            }else{
                if($tmp->attributes['flag']==$res){
                    $this->Access($vid,$_REQUEST['gid']);
                }else{
                    $flag=$tmp->attributes['flag']+1;
                    $result = Video::model()->updateAll(array('flag'=>$flag),'id=:id',array(':id'=>$_REQUEST['gid']));
                    if($result){
                        echo json_encode(array('code'=>200));
                    }else{
                        echo json_encode(array('code'=>404));
                    }
                }
            }
            //$this->Access($vid);
        }catch (ExceptionEx $ex){
            $this->PopMsg($ex->getMessage());
        }catch (Exception $e){
            $this->log($e->getMessage());
        }
    }

    public function actionAllSub(){
                $username = $_REQUEST['username'];
            //var_dump($username);
            $flag=1;
            $res  = Common::workid($username,$flag);
		$lists=array();
		$vidlist=array();
		$idlist=array();
        $arr=explode(' ',trim($_REQUEST['ids'])); 
		for($i=0;$i<count($arr);$i++){
			$lists=explode('_',$arr[$i]); 
			$vidlist[]=$lists[1]; //id
			$idlist[]=$lists[0];  //id
		}
		//存入vid
        /*foreach($vidlist as $k=>$v){
             $list = VerContent::model()->find("vid='$v'");
             if(empty($list)){
			$list=new VerContent();
             }
			$list->vid=$v;
			$list->flag=0;
			$list->status=0;
			$list->cTime=time();
			$list->delFlag=0;
			$list->save();
             $res = VerSiteListManager::getInsert($v);
        }*/
		//存入id
		foreach($idlist as $key=>$value){
                        $tmp = Video::model()->findByPk($value);
                        if($tmp->attributes['flag']==$res){
                            $this->Access($tmp->attributes['vid'],$value);
                         }else{
                    	    $flag=$tmp->attributes['flag']+1;
                    	    $result = Video::model()->updateAll(array('flag'=>$flag),'id=:id',array(':id'=>$value));
                         } 

		}
		
    } 

    public function Access($vid,$id){
        //$vid = $_REQUEST['vid'];
             $list = VerContent::model()->find("vid='$vid'");
             if(empty($list)){
                        $list=new VerContent();
             }
                        $list->vid=$vid;
                        $list->flag=0;
                        $list->status=0;
                        $list->cTime=time();
                        $list->delFlag=0;
                        $list->save();
            $res = VerSiteListManager::getInsert($vid);
            $resulst = Video::model()->updateAll(array('flag'=>6),'id=:id',array(':id'=>$id));
    }

    public function rejectlog($vid,$flag){
        $tmp = VerReject::model()->find("vid='$vid'");
        $reject = new VerRejectLog();
        $reject->user = $tmp->attributes['user'];
        $reject->user1 = $tmp->attributes['user1'];
        $reject->user2 = $tmp->attributes['user2'];
        $reject->user3 = $tmp->attributes['user3'];
        $reject->user4 = $tmp->attributes['user4'];
        $reject->user5 = $tmp->attributes['user5'];
        $reject->flag = $flag;
        $reject->message1 = $tmp->attributes['message1'];
        $reject->message2 = $tmp->attributes['message2'];
        $reject->message3 = $tmp->attributes['message3'];
        $reject->message4 = $tmp->attributes['message4'];
        $reject->message5 = $tmp->attributes['message5'];
        $reject->vid = $tmp->attributes['vid'];
        $reject->addTime = $tmp->attributes['addTime'];
        $reject->addTime1 = $tmp->attributes['addTime1'];
        $reject->addTime2 = $tmp->attributes['addTime2'];
        $reject->addTime3 = $tmp->attributes['addTime3'];
        $reject->addTime4 = $tmp->attributes['addTime4'];
        $reject->addTime5 = $tmp->attributes['addTime5'];
        $reject->save();
    }

    public function actionAccesslog(){

        if(!empty($_REQUEST['flag'])){
            $flag= $_REQUEST['flag'];
            $tmp = ReviewManager::getLog($flag);
        }else{
            $username=$_REQUEST['username'];
            $flag= '1';
            $res  = Common::getUser($username,$flag);
            $page = 20;
            $data = $this->getPageInfo($page);
            $list = array();
            if(!empty($_REQUEST['type'])){
                $list['type']=$_REQUEST['type'];
            }
            //var_dump($res);die;
            $list['cp']=$res['cp'];
            $list['review']=$res['review'];
            $tmp =VideoManager::getReview($data,$list);
            $url = $this->createUrl($this->action->id);
            $pagination = $this->renderPagination($url,$tmp['count'],$page,$data['currentPage']);
            $list = array();
            if(!empty($res['review'])){
                $list = $tmp['list'];
            }else{
                if(in_array('3',$res['status'])){
                    $list=$tmp['list'];
                }
            }
            $tmp =$list;
        }

        echo json_encode($tmp);
    }


    public function actionRejectView(){
        $gid = $_REQUEST['gid'];
        $flag = $_REQUEST['flag'];
        $n = $this->renderPartial(
            'rejectview',
            array(
                'gid'=>$gid,
                'flag'=>$flag,
            ),
            true
        );
        die(json_encode(array('code'=>200,'msg'=>$n)));
    }

    public function actionReject(){
            $username=$_REQUEST['username'];
            $message = $_REQUEST['message'];
            if($_REQUEST['flag']=='1'){
                $gid = $_REQUEST['gid'];
                $tmp = Video::model()->findByPk($gid);
                $vid = $tmp->attributes['vid'];
                $reject = VerReject::model()->find("vid = '$vid'");
                if(empty($reject)){
                    $reject = new VerReject();
                }
                switch($tmp->attributes['flag']){
                    case '1':$reject->message1=$message;$reject->addTime1  = time();$reject->user1=$username;break;
                    case '2':$reject->message2=$message;$reject->addTime2  = time();$reject->user2=$username;break;
                    case '3':$reject->message3=$message;$reject->addTime3  = time();$reject->user3=$username;break;
                    case '4':$reject->message4=$message;$reject->addTime4  = time();$reject->user4=$username;break;
                    case '5':$reject->message5=$message;$reject->addTime5  = time();$reject->user5=$username;break;
                }
                $reject->flag='1';
                $reject->delFlag='0';
                $reject->vid  = $vid;
                $reject->save();
                $type=2;
                $this->rejectlog($vid,$type);
                //var_dump($reject->getErrors());
                $resulst = Video::model()->updateAll(array('flag'=>0),'id=:id',array(':id'=>$gid));
            }else{
                $arr=explode(' ',trim($_REQUEST['gid']));
                for($i=0;$i<count($arr);$i++){
                    $lists=explode('_',$arr[$i]);
                    $vidlist[]=$lists[1]; //id
                    $idlist[]=$lists[0];  //id
                }
                foreach($vidlist as $k=>$v){
                    $tmp = Video::model()->find("vid='$v'");
                    $reject = VerReject::model()->find("vid='$v'");
                    if(empty($reject)){
                        $reject = new VerReject();
                    }
                    switch($tmp->attributes['flag']){
                        case '1':$reject->message1=$message;$reject->addTime1  = time();$reject->user1=$username;break;
                        case '2':$reject->message2=$message;$reject->addTime2  = time();$reject->user2=$username;break;
                        case '3':$reject->message3=$message;$reject->addTime3  = time();$reject->user3=$username;break;
                        case '4':$reject->message4=$message;$reject->addTime4  = time();$reject->user4=$username;break;
                        case '5':$reject->message5=$message;$reject->addTime5  = time();$reject->user5=$username;break;
                    }
                    $reject->flag='1';
                    $reject->delFlag='0';
                    $reject->vid  = $v;
                    $reject->save();
                    $type=2;
                    $this->rejectlog($v,$type);
                    //var_dump($reject->getErrors());
                    $resulst = Video::model()->updateAll(array('flag'=>0),'vid=:vid',array(':vid'=>$v));
                }

            }
            if(!empty($result)){
               echo json_encode(array('code'=>200));
            }else{
               echo json_encode(array('code'=>404));
            }
            //$this->Access($vid);
    }

    
    public function actionMvAdd(){
		try {
			if(!empty($_POST)){
				if(empty($_REQUEST['id'])){
					$video = new Video();
				}else{
					$video = Video::model()->findByPk($_REQUEST['id']);
				}
				$extra = VideoExtra::model()->find("vid='{$_REQUEST['vid']}'");
				if(empty($extra)){
					$extra = new VideoExtra();
				}
				if(!empty($_POST['title'])) $video->title=$_POST['title'];
				if(!empty($_POST['cp'])){
					switch($_POST['cp']){
						case '华数':$cp='642001';break;
						case '百视通':$cp='BESTVOTT';break;
						case '未来电视':$cp='ICNTV';break;
						case '南传':$cp='youpeng';break;
						case '芒果':$cp='HNBB';break;
						case '国广':$cp='CIBN';break;
						case '银河':$cp='YGYH';break;
					}
					$video->cp=$cp;
				}
				$arr = implode(' ',$_POST['type']);
				if(!empty($_POST['type'])) $video->type = !empty($arr) ? $arr : ' ';
				$video->flag='0';
				$video->upTime = time();
				$video->ShowType = !empty($_POST['ShowType'])?$_POST['ShowType']:'';
				$video->simple_set = isset($_POST['simple_set'])?$_POST['simple_set']:'';
				$video->templateType = !empty($_POST['templateType'])?$_POST['templateType']:'';
				$video->short = !empty($_POST['short'])?$_POST['short']:'';
				if(!empty($_POST['info'])) $video->info=!empty($_POST['info'])?$_POST['info']:'';
				if(!empty($_POST['initial'])) $video->initial=!empty($_POST['initial'])?$_POST['initial']:'';
				if(!empty($_POST['year'])) $video->year=!empty($_POST['year'])?$_POST['year']:'';
				if(!empty($_POST['director'])) $video->director=!empty($_POST['director'])?$_POST['director']:'';
				if(!empty($_POST['actor'])) $video->actor=!empty($_POST['actor'])?$_POST['actor']:'';
				if(!empty($_POST['keyword'])) $video->keyword=!empty($_POST['keyword'])?$_POST['keyword']:'';
				if(!empty($_POST['CountryOfOrigin'])) $video->CountryOfOrigin=!empty($_POST['CountryOfOrigin'])?$_POST['CountryOfOrigin']:'';
				if(!empty($_POST['language'])) $video->language=$_POST['language'];
				if(!empty($_POST['vid'])) $extra->vid=$_REQUEST['vid'];
				$extra->prize=!empty($_POST['prize'])?$_POST['prize']:'null';
				$extra->boxoffice=!empty($_POST['boxoffice'])?$_POST['boxoffice']:'null';
				$extra->comment=!empty($_POST['comment'])?$_POST['comment']:'null';
				$extra->end=!empty($_POST['end'])?$_POST['end']:'';
				$extra->orders=!empty($_POST['orders'])?$_POST['orders']:'';
				$extra->subtitles=!empty($_POST['subtitles'])?$_POST['subtitles']:'';
				$video->score=!empty($_POST['score'])?$_POST['score']:'';
				$extra->score=!empty($_POST['score'])?$_POST['score']:'';
				$extra->total=!empty($_POST['total'])?$_POST['total']:'0';
				$extra->tvstation=!empty($_POST['tvstation'])?$_POST['tvstation']:'0';
				$extra->bftime=!empty($_POST['bftime'])?$_POST['bftime']:'';
				$extra->cp=$cp;
				$video->save();
				$extra->save();
				if(!$video->save()){
					var_dump($video->getErrors());
					LogWriter::logModelSaveError($video,__METHOD__,$video->attributes);
					throw new ExceptionEx('信息保存失败');
				}
				if(!$extra->save()){
					var_dump($extra->getErrors());
					LogWriter::logModelSaveError($extra,__METHOD__,$extra->attributes);
					throw new ExceptionEx('信息保存失败');
				}
				$this->PopMsg('保存成功');
				$this->redirect($this->get_url('content','add',array('vid'=>$_REQUEST['vid'],'id'=>$_REQUEST['id'])));
			}
			$vid = $_REQUEST['vid'];
			$id = $_REQUEST['id'];
			$data = Video::model()->find("id = $id");
			$arr = array();
			$list= array();
			if (!empty($data)) {
				$arr = $data->attributes;
				$arr['type']=explode(' ',$arr['type']);
				$groupid = $arr['vid'];
				$lable= $arr['keyword'];
				$pa = "/^[\d,']+$/";
				preg_match($pa, $lable, $match);
				$arr['str']='';
				if(!empty($match)){
					$str = KeyWordManager::getKeyword($lable);
					$arr['str']=$str;
				}
				$list = VideoManager::findlist($groupid);
			}
			$dataextra = VideoExtra::model()->find("vid = '$vid'");
			$extra = array();
			if (!empty($dataextra)) {
				$extra = $dataextra->attributes;
			}
			$pic = VideoPic::model()->findAll("vid = '$vid' order by type desc");
			$this->render('mvadd', array( 'arr' => $arr,'extra'=>$extra, 'vid' => $_REQUEST['vid'],'pic'=>$pic,'list'=>$list));
		}catch (ExceptionEx $ex){
			$this->PopMsg($ex->getMessage());
		}catch (Exception $e){
			$this->log($e->getMessage());
		}
	}



    public function actionScreenReview(){
        //$list = VerScreenContentCopy::model()->findAll();
        $sql="select p.*,g.title as gtitle,s.name from yd_ver_screen_content_copy p inner join yd_ver_screen_guide g on p.screenGuideid=g.id and p.delFlag=1 and p.flag in(1,6) inner join yd_ver_station s on s.id=g.gid";
        $list = SQLManager::queryAll($sql);
        //var_dump($list);
        $this->render('screenreview',array('list'=>$list));
    }

    public function actionPic(){
        $pic = $_REQUEST['img'];
        $n = $this->renderPartial(
            'pic',
            array(
                'pic'=>$pic,
            ),
            true
        );
        die(json_encode(array('code'=>200,'msg'=>$n)));
    }

    public function actionContentAccess(){
        $flag = $_REQUEST['flag'];
        if(!empty($_REQUEST['id'])){
           $arr = explode(' ',trim($_REQUEST['id']));
            foreach($arr as $k=>$v){
                $list = VerScreenContentCopy::model()->findByPk($v);
                $screenGuideid = $list->screenGuideid;
                if($flag=='1'){
                    $this->addlog($list);
                    if($list->flag=='1'){
                        $list->flag='2';
                    }else{
                        $list->flag='5';
                    }
                    $delFlag='2';
                    //$list->delFlag='2';
                }else{
                    $this->nolog($list);
                    $list->flag='7';
                    $delFlag='0';
                    //$list->delFlag='0';
                }
                $list->save();
            $result = VerScreenContentCopy::model()->updateAll(array('delFlag'=>$delFlag),'screenGuideid=:screenGuideid',array(':screenGuideid'=>$screenGuideid));
            }
        }
    }

    public function actionAccessData(){
        $flag = $_REQUEST['flag'];
        if($flag=='1'){
            $flag='4';
        }else{
            $flag='5';
        }
        $tmp = ReviewManager::getData($flag);
        echo json_encode($tmp);
    }

    public function actionReviewData(){
        //$list = VerScreenContentCopy::model()->findAll();
        $sql="select p.*,g.title as gtitle,s.name from yd_ver_screen_content_copy p inner join yd_ver_screen_guide g on p.screenGuideid=g.id and p.delFlag=1 and p.flag in(1,6) inner join yd_ver_station s on s.id=g.gid order by addTime desc";
        $list = SQLManager::queryAll($sql);
        echo json_encode($list);
    }


    public function addlog($list){
        $content = new VerScreenContentLog();
        $content->title=$list->attributes['title'];
        $content->type=$list->attributes['type'];
        $content->tType=$list->attributes['tType'];
        $content->param=$list->attributes['param'];
        $content->action=$list->attributes['action'];
        $content->pic=$list->attributes['pic'];
        $content->cp=$list->attributes['cp'];
        $content->epg=$list->attributes['epg'];
        $content->screenGuideid=$list->attributes['screenGuideid'];
        $content->cid=$list->attributes['cid'];
        $content->width=$list->attributes['width'];
        $content->height=$list->attributes['height'];
        $content->x=$list->attributes['x'];
        $content->y=$list->attributes['y'];
        $content->order=$list->attributes['order'];
        $content->delFlag='4';
        $content->addTime=time();
        $content->uType=$list->attributes['uType'];
        if(!$content->save()){
            var_dump($content->getErrors());
        }
    }

    public function nolog($list){
        $content = new VerScreenContentLog();
        $content->title=$list->attributes['title'];
        $content->type=$list->attributes['type'];
        $content->tType=$list->attributes['tType'];
        $content->param=$list->attributes['param'];
        $content->action=$list->attributes['action'];
        $content->pic=$list->attributes['pic'];
        $content->cp=$list->attributes['cp'];
        $content->epg=$list->attributes['epg'];
        $content->screenGuideid=$list->attributes['screenGuideid'];
        $content->cid=$list->attributes['cid'];
        $content->width=$list->attributes['width'];
        $content->height=$list->attributes['height'];
        $content->x=$list->attributes['x'];
        $content->y=$list->attributes['y'];
        $content->addTime=time();
        $content->order=$list->attributes['order'];
        $content->delFlag='5';

        $content->uType=$list->attributes['uType'];
        if(!$content->save()){
            var_dump($content->getErrors());
        }
    }

    public function test($list){
        if(!empty($list->attributes['sid'])){
            $content = VerScreenContent::model()->findByPk($list->attributes['sid']);
        }else{
            $content = new VerScreenContent();
        }
        $content->title=$list->attributes['title'];
        $content->type=$list->attributes['type'];
        $content->tType=$list->attributes['tType'];
        $content->param=$list->attributes['param'];
        $content->action=$list->attributes['action'];
        $content->pic=$list->attributes['pic'];
        $content->cp=$list->attributes['cp'];
        $content->epg=$list->attributes['epg'];
        $content->screenGuideid=$list->attributes['screenGuideid'];
        $content->cid=$list->attributes['cid'];
        $content->width=$list->attributes['width'];
        $content->height=$list->attributes['height'];
        $content->x=$list->attributes['x'];
        $content->y=$list->attributes['y'];
        $content->order=$list->attributes['order'];
        $content->uType=$list->attributes['uType'];
        if(!$content->save()){
            var_dump($content->getErrors());
        }
        $list->sid=$content->attributes['id'];
    }
    public function actionSee(){
        $vid = $_REQUEST['vid'];
        $tmp=array();
        $tmp = ReviewManager::getList($vid);
        $n = $this->renderPartial(
            'see',
            array(
                'tmp'=>$tmp,
            ),
            true
        );
        die(json_encode(array('code'=>200,'msg'=>$n)));
    }

}
